qb
-------<template>
    <div class="question-box-container">
        <b-jumbotron>
            <template v-slot:lead>
                {{ currentQuestion.question }}
            </template>

            <hr class="my-4">

            <b-list-group>
                <b-list-group-item 
                    v-for="(answer,index) in shuffledAnswers" 
                    :key="index" 
                    @click="selectAnswer(index)"
                    :class="answerClass(index)">
                    {{ answer }}
                </b-list-group-item>
            </b-list-group>

            <b-button variant="primary" 
            @click="submitAnswer" :disabled="selectedIndex === null || answered ">
                Submit
            </b-button>
            <b-button @click="next" variant="success">Next</b-button>
        </b-jumbotron>
    </div>
</template>


<script>
import _ from 'lodash'

export default {
    props: {
        currentQuestion : Object,
        next : Function,
        increment: Function
    },
    data: function() {
        return {
            selectedIndex: null,
            correctIndex : null,
            shuffledAnswers: [],
            answered : false
        }
    },
    computed: {
        answers(){
            let answers = [...this.currentQuestion.incorrect_answers] 
            answers.push(this.currentQuestion.correct_answer)
            return answers
        }
    },
    watch:{
        currentQuestion: {
            immediate: true,
            handler(){
                this.selectedIndex = null
                this.answered = false
                this.shuffleAnswers()
            }
        }
    },
    methods: {
        selectAnswer(index){
            this.selectedIndex = index
        },
        submitAnswer(){
            let isCorrect = false
            
            if(this.selectedIndex === this.correctIndex){
                isCorrect = true
            }

            this.answered = true

            this.increment(isCorrect)
        },
        shuffleAnswers(){
            let answers = [...this.currentQuestion.incorrect_answers, this.currentQuestion.correct_answer]
            this.shuffledAnswers = _.shuffle(answers)
            this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)
        },
        answerClass(index){
            let answerClass = ''
            if(!this.answered && this.selectedIndex === index){
                answerClass = 'selected'
            }
            else if(this.answered && this.correctIndex === index){
                answerClass = 'correct'
            }
            else if(this.answered && this.selectedIndex === index && this.correctIndex !== index){
                answerClass = 'incorrect'
            }   
         return answerClass            
        }
    }
}
</script>

<style scoped>
    .list-group{
        margin-bottom: 15px;
    }

    .list-group-item:hover{
        background: #eee;
        cursor: pointer;
    }

    .btn{
        margin: 0 10px;
        width: 30%;
    }

    .selected {
        background-color: lightblue;
    }

    .correct{
        background-color: lightgreen;
    }
    
    .incorrect{
        background-color: red;
    }
</style>
--------------------------------------------
app.vue
<template>
  <div id="app">
    <Header 
    :numCorrect="numCorrect"
    :numTotal="numTotal"/>
    <b-container class="bv-example-row">
      <b-row>
        <b-col sm="6" offset = "3">
          <QuestionBox v-if="questions.length" 
            :currentQuestion = "questions[index]"
            :next="next"
            :increment = "increment"
          />
        </b-col>
      </b-row>
    </b-container>
  </div>
</template>

<script>
import Header from './components/Header.vue'
import QuestionBox from './components/QuestionBox.vue'

export default {
  name: 'app',
  components: {
    Header,
    QuestionBox
  },
  data(){
    return {
      questions:[],
      index : 0,
      numCorrect: 0,
      numTotal : 0
    }
  },
  methods: {
    next() {
      this.index++
    },
    increment(isCorrect){
      if(isCorrect){
        this.numCorrect++
      }
      this.numTotal++
    }
  },
  mounted: function(){
    fetch('https://opentdb.com/api.php?amount=10&category=18&type=multiple',{
      method: 'get'
    })
    .then((response) => {
      return response.json()
    })
    .then((jsonData) => {
      this.questions = jsonData.results
    })
  }
}
</script>

<style>
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
-------------------------------
Header
<template>
    <div>
        <b-nav tabs>
            <b-nav-item disabled><b>Fancy Quiz App</b></b-nav-item>
            <b-nav-item disabled>Counters: {{ numCorrect }}/{{ numTotal }}</b-nav-item>
        </b-nav>
    </div>
</template>

<script>
export default{
    props: [
        'numCorrect',
        'numTotal'
    ]
}
</script>